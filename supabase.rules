-- First, drop existing foreign key constraints
alter table if exists public.orders drop constraint if exists orders_user_id_fkey;
alter table if exists public.cart_items drop constraint if exists cart_items_user_id_fkey;
alter table if exists public.profiles drop constraint if exists profiles_id_fkey;

-- Drop existing tables to recreate them with proper constraints
drop table if exists public.order_items;
drop table if exists public.orders;
drop table if exists public.cart_items;
drop table if exists public.profiles;

-- Create profiles table with cascade delete
create table public.profiles (
    id uuid primary key references auth.users on delete cascade,
    email text not null,
    full_name text,
    phone text,
    address text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create cart_items table with cascade delete
create table public.cart_items (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users on delete cascade,
    product_id text not null,
    quantity int not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create orders table with cascade delete
create table public.orders (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users on delete cascade,
    total_amount numeric(10,2) not null,
    status text not null,
    shipping_address text not null,
    contact_phone text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create order_items table with cascade delete
create table public.order_items (
    id uuid primary key default uuid_generate_v4(),
    order_id uuid references orders on delete cascade,
    product_id text not null,
    quantity integer not null,
    price numeric(10,2) not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS on all tables
alter table public.profiles enable row level security;
alter table public.cart_items enable row level security;
alter table public.orders enable row level security;
alter table public.order_items enable row level security;

-- Create policies for profiles
create policy "Users can view own profile"
    on profiles for select
    using ( auth.uid() = id );

create policy "Users can update own profile"
    on profiles for update
    using ( auth.uid() = id );

create policy "Users can insert own profile"
    on profiles for insert
    with check ( auth.uid() = id );

create policy "Users can delete own profile"
    on profiles for delete
    using ( auth.uid() = id );

-- Create policies for cart_items
create policy "Users can view own cart items"
    on cart_items for select
    using ( auth.uid() = user_id );

create policy "Users can insert own cart items"
    on cart_items for insert
    with check ( auth.uid() = user_id );

create policy "Users can update own cart items"
    on cart_items for update
    using ( auth.uid() = user_id );

create policy "Users can delete own cart items"
    on cart_items for delete
    using ( auth.uid() = user_id );

-- Create policies for orders
create policy "Users can view own orders"
    on orders for select
    using ( auth.uid() = user_id );

create policy "Users can insert own orders"
    on orders for insert
    with check ( auth.uid() = user_id );

create policy "Users can delete own orders"
    on orders for delete
    using ( auth.uid() = user_id );

-- Create policies for order_items
create policy "Users can view own order items"
    on order_items for select
    using ( auth.uid() = (select user_id from orders where id = order_id) );

create policy "Users can insert own order items"
    on order_items for insert
    with check ( auth.uid() = (select user_id from orders where id = order_id) );

create policy "Users can delete own order items"
    on order_items for delete
    using ( auth.uid() = (select user_id from orders where id = order_id) );

-- Create trigger for new user profile
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
    insert into public.profiles (id, email, full_name, phone, address)
    values (new.id, new.email, '', '', '');
    return new;
end;
$$;

-- Create trigger for profile updates
create or replace function public.handle_updated_at()
returns trigger
language plpgsql
security definer
as $$
begin
    new.updated_at = now();
    return new;
end;
$$;

-- Create triggers
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure public.handle_new_user();

create trigger handle_profiles_updated_at
    before update on profiles
    for each row execute procedure public.handle_updated_at();

create trigger handle_orders_updated_at
    before update on orders
    for each row execute procedure public.handle_updated_at();

-- Grant permissions
grant usage on schema public to anon, authenticated;
grant all on all tables in schema public to anon, authenticated;
grant all on all sequences in schema public to anon, authenticated;